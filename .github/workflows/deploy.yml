name: Deploy to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  DOMAIN: "apes.techonstreet.com"
  EC2_IP: "13.60.12.244"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python manage.py test --verbosity=2

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
                        echo "üöÄ Starting deployment process..."
            
            # Check if application directory exists
            if [ ! -d "/opt/appraisal-system" ]; then
              echo "‚ùå Application directory not found. Running initial setup..."
              cd /home/ubuntu
              git clone https://github.com/segunemma2003/appraisal.git appraisal-system
              cd appraisal-system
              chmod +x deployment/initial_server_setup.sh
              ./deployment/initial_server_setup.sh
              cd /opt/appraisal-system
            else
              echo "‚úÖ Application directory found"
              cd /opt/appraisal-system
            fi
            
            echo "üìÅ Current directory: $(pwd)"
            
            # Check if .env file exists and has proper configuration
            if [ ! -f ".env" ]; then
              echo "‚ùå .env file not found. Creating from template..."
              cp deployment/env_template.txt .env
              echo "‚ö†Ô∏è  Please configure .env file manually!"
            else
              echo "‚úÖ .env file found"
            fi

            # Update ALLOWED_HOSTS to include the domain and IP
            echo "üåê Updating ALLOWED_HOSTS..."
            sed -i 's/ALLOWED_HOSTS=.*/ALLOWED_HOSTS=apes.techonstreet.com,13.60.12.244,localhost,127.0.0.1/' .env

            # Pull latest code
            echo "üì• Pulling latest code..."
            git pull origin main

            # Activate virtual environment
            echo "üêç Activating virtual environment..."
            source venv/bin/activate

            # Install dependencies
            echo "üì¶ Installing dependencies..."
            pip install -r requirements.txt

            # Run migrations
            echo "üîÑ Running migrations..."
            python manage.py migrate

            # Collect static files
            echo "üì¶ Collecting static files..."
            python manage.py collectstatic --noinput

            # Check service status before restart
            echo "üìä Checking service status before restart..."
            sudo systemctl status appraisal-production --no-pager -l || echo "Service not running or not found"

            # Restart the service
            echo "üîÑ Restarting appraisal-production service..."
            sudo systemctl restart appraisal-production

            # Wait a moment for service to start
            sleep 5

            # Check service status after restart
            echo "üìä Checking service status after restart..."
            sudo systemctl status appraisal-production --no-pager -l

            # Check if the service is listening on port 8000
            echo "üîç Checking if service is listening on port 8000..."
            sudo netstat -tlnp | grep :8000 || echo "‚ùå Service not listening on port 8000"

            # Test local connectivity
            echo "üß™ Testing local connectivity..."
            if curl -s http://localhost:8000/health/ > /dev/null; then
              echo "‚úÖ Django app is responding on port 8000"
            else
              echo "‚ùå Django app is not responding on port 8000"
              echo "üìù Recent service logs:"
              sudo journalctl -u appraisal-production --no-pager -n 20
            fi

                        # Run startup services script
            echo "üöÄ Running startup services script..."
            chmod +x deployment/startup_services.sh
            ./deployment/startup_services.sh

            # Check firewall status
            echo "üî• Checking firewall status..."
            sudo ufw status

                        # Show final status
            echo "üìã Final deployment status:"
            echo "   - Django app: $(sudo systemctl is-active appraisal-production)"
            echo "   - Nginx: $(sudo systemctl is-active nginx)"
            echo "   - Port 8000: $(sudo netstat -tlnp | grep :8000 | wc -l) listeners"
            echo "   - Port 8080: $(sudo netstat -tlnp | grep :8080 | wc -l) listeners"
            echo "   - Port 80: $(sudo netstat -tlnp | grep :80 | wc -l) listeners"

            # Check SSL status
            echo "   - SSL Certificate: $(if [ -f "/etc/letsencrypt/live/apes.techonstreet.com/fullchain.pem" ]; then echo '‚úÖ Installed'; else echo '‚ùå Not installed'; fi)"

            echo "‚úÖ Deployment completed for ${{ env.DOMAIN }}"
            echo "üîó Access URLs:"
            echo "   - Direct Django: http://13.60.12.244:8000"
            echo "   - Via Nginx (port 8080): http://13.60.12.244:8080"
            echo "   - Domain HTTP: http://${{ env.DOMAIN }}"
            echo "   - Domain HTTPS: https://${{ env.DOMAIN }}"

            # Test SSL if available
            if [ -f "/etc/letsencrypt/live/apes.techonstreet.com/fullchain.pem" ]; then
                echo "üîí Testing HTTPS access..."
                if curl -s -I https://${{ env.DOMAIN }} > /dev/null; then
                    echo "‚úÖ HTTPS is working: https://${{ env.DOMAIN }}"
                else
                    echo "‚ö†Ô∏è HTTPS test failed, but certificate is installed"
                fi
            fi
