name: Deploy to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  PYTHON_VERSION: "3.11"
  DOMAIN: "apes.techonstreet.com"
  EC2_IP: "13.60.12.244"

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-django

      - name: Run tests
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          SECRET_KEY: test-secret-key
          DEBUG: True
        run: |
          python manage.py test --verbosity=2

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ env.EC2_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: ${{ secrets.EC2_PORT }}
          script: |
            echo "🚀 Starting deployment process..."

            # Check if application directory exists
            if [ ! -d "/opt/appraisal-system" ]; then
              echo "❌ Application directory not found. Running initial setup..."
              cd /home/ubuntu
              git clone https://github.com/segunemma2003/appraisal.git appraisal-system
              cd appraisal-system
              chmod +x deployment/initial_server_setup.sh
              ./deployment/initial_server_setup.sh
              cd /opt/appraisal-system
            else
              echo "✅ Application directory found"
              cd /opt/appraisal-system
            fi

            echo "📁 Current directory: $(pwd)"

            # Check if .env file exists and has proper configuration
            if [ ! -f ".env" ]; then
              echo "❌ .env file not found. Creating from template..."
              cp deployment/env_template.txt .env
              echo "⚠️  Please configure .env file manually!"
            else
              echo "✅ .env file found"
            fi

            # Update ALLOWED_HOSTS to include the domain and IP
            echo "🌐 Updating ALLOWED_HOSTS..."
            sed -i 's/ALLOWED_HOSTS=.*/ALLOWED_HOSTS=apes.techonstreet.com,13.60.12.244,localhost,127.0.0.1/' .env

            # Temporarily enable DEBUG for error visibility
            echo "🐛 Enabling DEBUG mode for error visibility..."
            sed -i 's/DEBUG=.*/DEBUG=True/' .env

            # Pull latest code
            echo "📥 Pulling latest code..."
            git pull origin main

            # Activate virtual environment
            echo "🐍 Activating virtual environment..."
            source venv/bin/activate

            # Install dependencies
            echo "📦 Installing dependencies..."
            pip install -r requirements.txt

            # Run Django checks
            echo "🔧 Running Django checks..."
            
            # Check current DEBUG setting
            echo "🐛 Current DEBUG setting:"
            python manage.py shell -c "
from django.conf import settings
print(f'DEBUG: {settings.DEBUG}')
print(f'ALLOWED_HOSTS: {settings.ALLOWED_HOSTS}')
"
            
            if ! python manage.py check --deploy; then
              echo "⚠️  Django check found issues, attempting to fix..."
              echo "🔄 Creating migrations for all apps..."
              python manage.py makemigrations core
              python manage.py makemigrations evaluations
              python manage.py makemigrations users
              python manage.py makemigrations notifications
              echo "🔄 Running migrations..."
              python manage.py migrate
              echo "🔧 Running Django checks again..."
              python manage.py check --deploy
            fi

            # Run migrations (if not already run above)
            echo "🔄 Running migrations..."
            python manage.py migrate

            # Collect static files
            echo "📦 Collecting static files..."
            python manage.py collectstatic --noinput

            # Check if superuser exists, create if not
            echo "👤 Checking superuser..."
            python manage.py shell -c "
            from django.contrib.auth import get_user_model
            User = get_user_model()
            if not User.objects.filter(is_superuser=True).exists():
                print('Creating superuser...')
                User.objects.create_superuser('admin', 'admin@apes.techonstreet.com', 'admin123')
                print('Superuser created: admin/admin123')
            else:
                print('Superuser already exists')
            "

            # Run seed data script to populate default data
            echo "🌱 Running seed data script..."
            python seed_data.py

            # Check service status before restart
            echo "📊 Checking service status before restart..."
            sudo systemctl status appraisal-production --no-pager -l || echo "Service not running or not found"

            # Restart the service
            echo "🔄 Restarting appraisal-production service..."
            sudo systemctl restart appraisal-production

            # Wait a moment for service to start
            sleep 5

            # Check service status after restart
            echo "📊 Checking service status after restart..."
            sudo systemctl status appraisal-production --no-pager -l

            # Check if the service is listening on port 8000
            echo "🔍 Checking if service is listening on port 8000..."
            sudo netstat -tlnp | grep :8000 || echo "❌ Service not listening on port 8000"

            # Test local connectivity
            echo "🧪 Testing local connectivity..."
            if curl -s http://localhost:8000/health/ > /dev/null; then
              echo "✅ Django app is responding on port 8000"
            else
              echo "❌ Django app is not responding on port 8000"
              echo "📝 Recent service logs:"
              sudo journalctl -u appraisal-production --no-pager -n 20
            fi

            # Test admin route with detailed error capture
            echo "🧪 Testing admin route..."
            ADMIN_RESPONSE=$(curl -s -w "%{http_code}" http://localhost:8000/admin/ -o /dev/null)
            if [ "$ADMIN_RESPONSE" = "200" ] || [ "$ADMIN_RESPONSE" = "302" ]; then
              echo "✅ Admin route is working (HTTP $ADMIN_RESPONSE)"
            else
              echo "❌ Admin route has issues (HTTP $ADMIN_RESPONSE)"
              
              # Capture detailed error response
              echo "📝 Capturing detailed error response..."
              curl -s -v http://localhost:8000/admin/ 2>&1 | head -50
              
              echo "📝 Recent Django logs:"
              sudo journalctl -u appraisal-production --no-pager -n 30
              
              echo "📝 Django error log file:"
              if [ -f "logs/django.log" ]; then
                tail -50 logs/django.log
              else
                echo "No Django log file found"
              fi
              
              echo "📝 Running comprehensive model fix..."
              chmod +x deployment/fix_model_errors.sh
              ./deployment/fix_model_errors.sh
              
              # Test admin route again after fix
              echo "🧪 Testing admin route after fix..."
              ADMIN_RESPONSE_AFTER=$(curl -s -w "%{http_code}" http://localhost:8000/admin/ -o /dev/null)
              if [ "$ADMIN_RESPONSE_AFTER" = "200" ] || [ "$ADMIN_RESPONSE_AFTER" = "302" ]; then
                echo "✅ Admin route is now working after fix (HTTP $ADMIN_RESPONSE_AFTER)"
              else
                echo "❌ Admin route still has issues after fix (HTTP $ADMIN_RESPONSE_AFTER)"
                echo "📝 Final error capture:"
                curl -s -v http://localhost:8000/admin/ 2>&1 | head -50
                echo "📝 Final Django logs:"
                sudo journalctl -u appraisal-production --no-pager -n 20
              fi
            fi

            # Run startup services script
            echo "🚀 Running startup services script..."
            chmod +x deployment/startup_services.sh
            ./deployment/startup_services.sh

            # Check firewall status
            echo "🔥 Checking firewall status..."
            sudo ufw status

            # Disable DEBUG mode for production
            echo "🔒 Disabling DEBUG mode for production..."
            sed -i 's/DEBUG=.*/DEBUG=False/' .env
            
            # Restart service with production settings
            echo "🔄 Restarting service with production settings..."
            sudo systemctl restart appraisal-production
            sleep 3

            # Show final status
            echo "📋 Final deployment status:"
            echo "   - Django app: $(sudo systemctl is-active appraisal-production)"
            echo "   - Nginx: $(sudo systemctl is-active nginx)"
            echo "   - Port 8000: $(sudo netstat -tlnp | grep :8000 | wc -l) listeners"

            # Check SSL status
            echo "   - SSL Certificate: $(if [ -f "/etc/letsencrypt/live/apes.techonstreet.com/fullchain.pem" ]; then echo '✅ Installed'; else echo '❌ Not installed'; fi)"

            echo "✅ Deployment completed for ${{ env.DOMAIN }}"
            echo "🔗 Access URLs:"
            echo "   - Direct Django (HTTP): http://13.60.12.244:8000"
            echo "   - Direct Django (HTTP): http://${{ env.DOMAIN }}:8000"
            echo "   - Admin: http://13.60.12.244:8000/admin/"
            echo "   - Admin: http://${{ env.DOMAIN }}:8000/admin/"
            echo "   - HTTPS (if SSL): https://${{ env.DOMAIN }}"

            # Test SSL if available
            if [ -f "/etc/letsencrypt/live/apes.techonstreet.com/fullchain.pem" ]; then
                echo "🔒 Testing HTTPS access..."
                if curl -s -I https://${{ env.DOMAIN }} > /dev/null; then
                    echo "✅ HTTPS is working: https://${{ env.DOMAIN }}"
                else
                    echo "⚠️ HTTPS test failed, but certificate is installed"
                fi
            fi
