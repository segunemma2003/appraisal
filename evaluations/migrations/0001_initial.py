# Generated by Django 5.2.4 on 2025-07-29 12:55

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('core', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EvaluationPeriod',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('start_date', models.DateField()),
                ('end_date', models.DateField()),
                ('is_active', models.BooleanField(default=True)),
                ('is_open_for_submission', models.BooleanField(default=False, help_text='HR can open/close submission period')),
                ('submission_deadline', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'evaluations_evaluation_period',
                'ordering': ['-start_date'],
            },
        ),
        migrations.CreateModel(
            name='EvaluationQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('question_type', models.CharField(choices=[('text', 'Text Input'), ('textarea', 'Text Area'), ('number', 'Number Input'), ('select', 'Select Choice'), ('radio', 'Radio Buttons'), ('checkbox', 'Checkboxes'), ('rating', 'Rating Scale'), ('file', 'File Upload')], max_length=20)),
                ('section', models.CharField(choices=[('personal_data', 'Personal Data'), ('qualifications', 'Qualifications'), ('employment_history', 'Employment History'), ('acting_appointments', 'Acting Appointments'), ('training', 'Training & Development'), ('responsibilities', 'Present Responsibilities'), ('performance_targets', 'Performance Targets'), ('performance_aspects', 'Performance Aspects'), ('training_needs', 'Training Needs'), ('career_development', 'Career Development'), ('recommendations', 'Recommendations')], max_length=30)),
                ('staff_level', models.CharField(choices=[('junior', 'Junior Staff'), ('senior', 'Senior Staff'), ('both', 'Both')], default='both', max_length=10)),
                ('order', models.IntegerField(default=0)),
                ('is_required', models.BooleanField(default=True)),
                ('help_text', models.TextField(blank=True)),
                ('options', models.JSONField(blank=True, default=list, help_text='For select/radio/checkbox questions')),
                ('max_score', models.IntegerField(default=0, help_text='Maximum score for rating questions')),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'evaluations_evaluation_question',
                'ordering': ['section', 'order'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceAspect',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('max_weighted_score', models.IntegerField(default=10)),
                ('staff_level', models.CharField(choices=[('junior', 'Junior Staff'), ('senior', 'Senior Staff'), ('both', 'Both')], default='both', max_length=10)),
                ('order', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'evaluations_performance_aspect',
                'ordering': ['order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EvaluationForm',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('draft', 'Draft'), ('submitted', 'Submitted'), ('under_review', 'Under Review'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('completed', 'Completed')], default='draft', max_length=20)),
                ('self_appraisal_data', models.JSONField(blank=True, default=dict)),
                ('self_appraisal_submitted_at', models.DateTimeField(blank=True, null=True)),
                ('supervisor_assessment_data', models.JSONField(blank=True, default=dict)),
                ('supervisor_assessment_submitted_at', models.DateTimeField(blank=True, null=True)),
                ('final_review_data', models.JSONField(blank=True, default=dict)),
                ('final_review_submitted_at', models.DateTimeField(blank=True, null=True)),
                ('total_score', models.DecimalField(blank=True, decimal_places=2, max_digits=5, null=True)),
                ('performance_rating', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('final_review_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='final_reviews', to=settings.AUTH_USER_MODEL)),
                ('supervisor_assessed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='supervisor_assessments', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_forms', to=settings.AUTH_USER_MODEL)),
                ('period', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_forms', to='evaluations.evaluationperiod')),
            ],
            options={
                'db_table': 'evaluations_evaluation_form',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CareerDevelopmentPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('different_job_same_grade', models.BooleanField(default=False)),
                ('transfer_similar_level', models.BooleanField(default=False)),
                ('job_description', models.TextField(blank=True)),
                ('reasons', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recommended_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_plans_recommended', to=settings.AUTH_USER_MODEL)),
                ('evaluation_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='career_plans', to='evaluations.evaluationform')),
            ],
            options={
                'db_table': 'evaluations_career_development_plan',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EvaluationRecommendation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('recommendation_type', models.CharField(choices=[('promotion', 'Recommended for Promotion'), ('no_promotion', 'Not Recommended for Promotion'), ('increment', 'Recommended for Annual Increment'), ('no_increment', 'Not Recommended for Annual Increment'), ('commendation', 'Recommended for Commendation'), ('warning', 'Warning/Advice Recommended'), ('withhold_increment', 'Withholding of Annual Increment')], max_length=20)),
                ('justification', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('evaluation_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recommendations', to='evaluations.evaluationform')),
                ('recommended_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_recommendations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'evaluations_evaluation_recommendation',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='PerformanceRating',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.CharField(choices=[('excellent', 'Excellent'), ('very_good', 'Very Good'), ('good', 'Good'), ('fair', 'Fair'), ('poor', 'Poor')], max_length=20)),
                ('score', models.DecimalField(decimal_places=2, max_digits=5)),
                ('comments', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('aspect', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='evaluations.performanceaspect')),
                ('evaluation_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_ratings', to='evaluations.evaluationform')),
                ('rated_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='performance_ratings_given', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'evaluations_performance_rating',
                'ordering': ['aspect__order'],
            },
        ),
        migrations.CreateModel(
            name='TrainingNeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('training_type', models.CharField(choices=[('materials_time', 'Further instruction on the use of materials and time'), ('refresher', 'Refresher Course / Seminar'), ('method_change', 'Change of method of operation'), ('management', 'Training in effective management of staff'), ('attachment', 'Attachment to another officer to gain more experience'), ('formal_education', 'Formal education to acquire more knowledge'), ('specialization', 'Training course to specialize in a field'), ('new_skills', 'Training in new skills'), ('remedial', 'Special training to remedy observed deficiency')], max_length=20)),
                ('description', models.TextField(blank=True)),
                ('priority', models.CharField(choices=[('high', 'High'), ('medium', 'Medium'), ('low', 'Low')], default='medium', max_length=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('evaluation_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_needs', to='evaluations.evaluationform')),
                ('identified_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_needs_identified', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'evaluations_training_need',
                'ordering': ['priority', 'training_type'],
            },
        ),
        migrations.CreateModel(
            name='EvaluationApproval',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('rejected', 'Rejected'), ('returned', 'Returned for Revision')], default='pending', max_length=20)),
                ('comments', models.TextField(blank=True)),
                ('approved_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('approval_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='core.approvallevel')),
                ('approver', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='evaluation_approvals', to=settings.AUTH_USER_MODEL)),
                ('evaluation_form', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='approvals', to='evaluations.evaluationform')),
            ],
            options={
                'db_table': 'evaluations_evaluation_approval',
                'ordering': ['approval_level__level', 'created_at'],
                'unique_together': {('evaluation_form', 'approval_level')},
            },
        ),
        migrations.AddIndex(
            model_name='evaluationform',
            index=models.Index(fields=['user', 'period'], name='evaluations_user_id_04af5e_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluationform',
            index=models.Index(fields=['status'], name='evaluations_status_43c303_idx'),
        ),
        migrations.AddIndex(
            model_name='evaluationform',
            index=models.Index(fields=['period', 'status'], name='evaluations_period__39e741_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='evaluationform',
            unique_together={('user', 'period')},
        ),
        migrations.AlterUniqueTogether(
            name='performancerating',
            unique_together={('evaluation_form', 'aspect')},
        ),
    ]
